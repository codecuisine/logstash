input {
  beats {
    codec => "json"
    port => 5001
    type => "logs"
    ssl => true
    ssl_verify_mode => "peer"
    ssl_certificate => "/app/logstash.crt"
    ssl_key => "/app/logstash.key"
    ssl_certificate_authorities => ["/app/logstash_ca.crt"]
  }
}
filter {
  if [type] == "cells" {
    json {
    source => "_source"
    }
  }
  if [type] == "scan" {
    json {
    source => "_source"
    }
  }
  if [type] == "gsm_modem_channel" {
    json {
    source => "_source"
    }
  }
  if [type] == "kal_channel" {
    json {
    source => "_source"
    }
  }
  if [type] == "geoip" {
    json {
    source => "_source"
    }
  }
  if [type] == "gpsd" {
    json {
    source => "_source"
    }
  }
  if [type] == "arfcn_enricher" {
    json {
    source => "_source"
    }
  }
  if [type] == "heartbeat" {
    json {
    source => "_source"
    }
  }
  if [type] == "health_check" {
    json {
    source => "_source"
    }
  }
  if [type] == "sitch_init" {
    json {
    source => "_source"
    }
  }
  if [type] == "sitch_alert" {
    json {
    source => "_source"
    }
  }
  mutate {
  add_field => { "[gps_location][lat]" => "%{[location][coordinates][1]}" }
  add_field => { "[gps_location][lon]" => "%{[location][coordinates][0]}" }
  }
  mutate {
  convert => { "[gps_location][lat]" => "float" }
  convert => { "[gps_location][lon]" => "float" }
  }
}
output {
    if [type] == "sitch_alert"{
      slack {
          url => "${SLACK_WEBHOOK}"
          username => "${SLACK_USERNAME}"
          icon_emoji => "${SLACK_ICON}"
          format => "Message Type: %{id} | Original Message: %{details} | Host ID: %{host}"
        }
      }
      influxdb {
        host        => "${INFLUXDB_HOST}"
        port        => "${INFLUXDB_PORT}"
        db          => "sitch"
        measurement => "sitch"
        "coerce_values" => { "power" => "float"
          "time_drift" => "float"
          "cell" => "integer"
          "rxl" => "float"
          "lac" => "float"
          "txp" => "float"
          "ta" => "float"
          "rxq" => "float"
          "rla" => "float"
          "root_vol" => "float"
          "mem_free" => "float"
          }
        data_points => { "scans.%{host}.%{band}.%{channel}.power" => "%{power}"
          "gps.%{site_name}.%{host}.time_drift" => "%{time_drift}"
          "channels.%{site_name}.%{host}.%{band}.%{channel}.kal_power" => "%{power}"
          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.priority" => "%{cell}"
          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.rxl" => "%{rxl}"
          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.lac" => "%{lac}"
#          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.bsic" => "%{bsic}"
#          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.mnc" => "%{mnc}"
#          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.mcc" => "%{mcc}"
#          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.cellid" => "%{cellid}"
          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.txp" => "%{txp}"
          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.ta" => "%{ta}"
          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.rxq" => "%{rxq}"
          "channels.%{site_name}.%{host}.%{band}.%{arfcn}.rla" => "%{rla}"
#          "channels.%{site_name}.%{host}.%{band}.%{cell}.arfcn" => "%{arfcn}"
#          "channels.%{site_name}.%{host}.%{band}.%{cell}.lac" => "%{lac}"
          "cells.%{site_name}.%{host}.%{cell}.rxl" => "%{rxl}"
          "cells.%{site_name}.%{host}.%{cell}.ta" => "%{ta}"
          "cells.%{site_name}.%{host}.%{cell}.rxq" => "%{rxq}"
          "cells.%{site_name}.%{host}.%{cell}.rla" => "%{rla}"
          "cells.%{site_name}.%{host}.%{cell}.txp" => "%{txp}"
          "sensors.%{host}.disk" => "%{root_vol}"
          "sensors.%{host}.memory_free" => "%{mem.free}"
          "sensors.%{host}.queue_size.arfcn_correlator" => "%{queue_sizes.arfcn_correlator}"
          "sensors.%{host}.queue_size.cgi_correlator" => "%{queue_sizes.cgi_correlator}"
          "sensors.%{host}.queue_size.geo_correlator" => "%{queue_sizes.geo_correlator}"
          "sensors.%{host}.queue_size.scan_results" => "%{queue_sizes.scan_results}"
        }

      }
      elasticsearch { hosts => ["${ES_URL}"] }
}
